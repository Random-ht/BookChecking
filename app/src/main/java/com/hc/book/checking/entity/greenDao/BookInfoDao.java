package com.hc.book.checking.entity.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hc.book.checking.entity.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO".
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookAuthor = new Property(2, String.class, "bookAuthor", false, "BOOK_AUTHOR");
        public final static Property BookISBNCode = new Property(3, String.class, "bookISBNCode", false, "BOOK_ISBNCODE");
        public final static Property GenreCode = new Property(4, String.class, "genreCode", false, "GENRE_CODE");
        public final static Property PressName = new Property(5, String.class, "pressName", false, "PRESS_NAME");
        public final static Property PurchaseDate = new Property(6, String.class, "purchaseDate", false, "PURCHASE_DATE");
        public final static Property PageNumber = new Property(7, String.class, "pageNumber", false, "PAGE_NUMBER");
        public final static Property BookCount = new Property(8, String.class, "bookCount", false, "BOOK_COUNT");
        public final static Property Money = new Property(9, String.class, "money", false, "MONEY");
        public final static Property TotalMoney = new Property(10, String.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property CreateDate = new Property(11, Long.class, "createDate", false, "CREATE_DATE");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_NAME\" TEXT," + // 1: bookName
                "\"BOOK_AUTHOR\" TEXT," + // 2: bookAuthor
                "\"BOOK_ISBNCODE\" TEXT," + // 3: bookISBNCode
                "\"GENRE_CODE\" TEXT," + // 4: genreCode
                "\"PRESS_NAME\" TEXT," + // 5: pressName
                "\"PURCHASE_DATE\" TEXT," + // 6: purchaseDate
                "\"PAGE_NUMBER\" TEXT," + // 7: pageNumber
                "\"BOOK_COUNT\" TEXT," + // 8: bookCount
                "\"MONEY\" TEXT," + // 9: money
                "\"TOTAL_MONEY\" TEXT," + // 10: totalMoney
                "\"CREATE_DATE\" INTEGER);"); // 11: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(3, bookAuthor);
        }
 
        String bookISBNCode = entity.getBookISBNCode();
        if (bookISBNCode != null) {
            stmt.bindString(4, bookISBNCode);
        }
 
        String genreCode = entity.getGenreCode();
        if (genreCode != null) {
            stmt.bindString(5, genreCode);
        }
 
        String pressName = entity.getPressName();
        if (pressName != null) {
            stmt.bindString(6, pressName);
        }
 
        String purchaseDate = entity.getPurchaseDate();
        if (purchaseDate != null) {
            stmt.bindString(7, purchaseDate);
        }
 
        String pageNumber = entity.getPageNumber();
        if (pageNumber != null) {
            stmt.bindString(8, pageNumber);
        }
 
        String bookCount = entity.getBookCount();
        if (bookCount != null) {
            stmt.bindString(9, bookCount);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(10, money);
        }
 
        String totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindString(11, totalMoney);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(3, bookAuthor);
        }
 
        String bookISBNCode = entity.getBookISBNCode();
        if (bookISBNCode != null) {
            stmt.bindString(4, bookISBNCode);
        }
 
        String genreCode = entity.getGenreCode();
        if (genreCode != null) {
            stmt.bindString(5, genreCode);
        }
 
        String pressName = entity.getPressName();
        if (pressName != null) {
            stmt.bindString(6, pressName);
        }
 
        String purchaseDate = entity.getPurchaseDate();
        if (purchaseDate != null) {
            stmt.bindString(7, purchaseDate);
        }
 
        String pageNumber = entity.getPageNumber();
        if (pageNumber != null) {
            stmt.bindString(8, pageNumber);
        }
 
        String bookCount = entity.getBookCount();
        if (bookCount != null) {
            stmt.bindString(9, bookCount);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(10, money);
        }
 
        String totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindString(11, totalMoney);
        }
 
        Long createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookAuthor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookISBNCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // genreCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pressName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // purchaseDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pageNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bookCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // money
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // totalMoney
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookISBNCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGenreCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPressName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPurchaseDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPageNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBookCount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMoney(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTotalMoney(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateDate(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
